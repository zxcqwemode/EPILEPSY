require('dotenv').config();
const db = require('./config/db'); // –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const TelegramBot = require('node-telegram-bot-api');
const handleStartCommand = require('./commands/start');
const handleLanguageSelection = require('./handlers/languageHandler');
const handleCallbackQueryRussian = require('./handlers/callbackHandlerRussian');
const handleCallbackQueryEnglish = require('./handlers/callbackHandlerEnglish');
const handleMyProfileCommand = require('./commands/myProfile');
const callbackMyProfileRussian = require('./handlers/myProfileRussian');
const callbackMyProfileEnglish = require('./handlers/myProfileEnglish');
const informationRussian = require('./cabinet/informationHandler/informationRussian');
const informationEnglish = require('./cabinet/informationHandler/informationEnglish');
const scheduleNotifications = require('./cabinet/notificationHandler/notifications');


// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
const handleNotificationsRussian = require('./cabinet/notificationHandler/handleNotificationsRussian');
const handleChangeNotificationRussian = require('./cabinet/notificationHandler/handleChangeNotificationRussian');
const handleChangeTimeRussian = require('./cabinet/notificationHandler/handleChangeTimeRussian');
const handleSetTimeRussian = require('./cabinet/notificationHandler/handleSetTimeRussian');
const handleChangeTextRussian = require('./cabinet/notificationHandler/handleChangeTextRussian');

const handleNotificationsEnglish = require('./cabinet/notificationHandler/handleNotificationsEnglish');
const handleChangeNotificationEnglish = require('./cabinet/notificationHandler/handleChangeNotificationEnglish');
const handleChangeTimeEnglish = require('./cabinet/notificationHandler/handleChangeTimeEnglish');
const handleSetTimeEnglish = require('./cabinet/notificationHandler/handleSetTimeEnglish');
const handleChangeTextEnglish = require('./cabinet/notificationHandler/handleChangeTextEnglish');

// –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤—Ä–∞—á–æ–º
const handleDoctorConnectionRussian = require('./cabinet/doctorConnection/doctorConnectionRussian');
const handleSendMessageRussian = require('./cabinet/doctorConnection/sendMessageRussian');
const handleViewMessagesRussian = require('./cabinet/doctorConnection/viewMessagesRussian');

const handleDoctorConnectionEnglish = require('./cabinet/doctorConnection/doctorConnectionEnglish');
const handleSendMessageEnglish = require('./cabinet/doctorConnection/sendMessageEnglish');
const handleViewMessagesEnglish = require('./cabinet/doctorConnection/viewMessagesEnglish');

const {seizureCalendarRussian,
    handleChangeMonthRussian}= require('./cabinet/calendar/seizureCalendarRussian');
const seizureCalendarEnglish = require('./cabinet/calendar/seizureCalendarEnglish');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
const initializeDatabase = async () => {
    // (–õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü)
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
initializeDatabase().then(() => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.onText(/\/start/, (msg) => {
        handleStartCommand(bot, msg);
    });

    scheduleNotifications(bot);

    bot.onText(/\/myProfile/, (msg) => {
        handleMyProfileCommand(bot, msg);
    });

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userLanguages = {};

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
    bot.on('callback_query', async (callbackQuery) => {
        const chatId = callbackQuery.message.chat.id;
        const data = callbackQuery.data;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userMessageIds
        if (!bot.userMessageIds) {
            bot.userMessageIds = {};
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–∑—ã–∫
        if (data === 'language_russian' || data === 'language_english') {
            await handleLanguageSelection(bot, callbackQuery);
            userLanguages[chatId] = data === 'language_russian' ? '–†—É—Å—Å–∫–∏–π' : 'English';
        }
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–ª–µ–∑–Ω–∏
        else if (data === 'info_about_disease') {
            const userLanguage = userLanguages[chatId] || '–†—É—Å—Å–∫–∏–π';
            if (userLanguage === 'English') {
                await informationEnglish(bot, chatId);
            } else {
                await informationRussian(bot, chatId);
            }
        }
        // –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å
        else if (data === 'back_to_profile') {
            const userLanguage = userLanguages[chatId] || '–†—É—Å—Å–∫–∏–π';
            if (userLanguage === 'English') {
                await callbackMyProfileEnglish(bot, { chat: { id: chatId } });
            } else {
                await callbackMyProfileRussian(bot, { chat: { id: chatId } });
            }
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        else if (data === 'notifications') {
            const userLanguage = userLanguages[chatId] || '–†—É—Å—Å–∫–∏–π';
            if (userLanguage === 'English') {
                await handleNotificationsEnglish(bot, chatId);
            } else {
                await handleNotificationsRussian(bot, chatId);
            }
        }
        else if (data === 'change_notification') {
            const userLanguage = userLanguages[chatId] || '–†—É—Å—Å–∫–∏–π';
            if (userLanguage === 'English') {
                await handleChangeNotificationEnglish(bot, chatId);
            } else {
                await handleChangeNotificationRussian(bot, chatId);
            }
        }
        else if (data === 'change_time') {
            const userLanguage = userLanguages[chatId] || '–†—É—Å—Å–∫–∏–π';
            if (userLanguage === 'English') {
                await handleChangeTimeEnglish(bot, chatId);
            } else {
                await handleChangeTimeRussian(bot, chatId);
            }
        }
        else if (data === 'change_text') {
            const userLanguage = userLanguages[chatId] || '–†—É—Å—Å–∫–∏–π';
            if (userLanguage === 'English') {
                await handleChangeTextEnglish(bot, chatId);
            } else {
                await handleChangeTextRussian(bot, chatId);
            }
        }
        else if (data.startsWith('time_morning_edit') || data.startsWith('time_afternoon_edit') || data.startsWith('time_evening_edit')) {
            const userLanguage = userLanguages[chatId] || '–†—É—Å—Å–∫–∏–π';
            if (userLanguage === 'English') {
                await handleSetTimeEnglish(bot, chatId, data);
            } else {
                await handleSetTimeRussian(bot, chatId, data);
            }
        }

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /seizure_calendar
        else if (data === 'seizure_calendar') {
            const userLanguage = userLanguages[chatId] || '–†—É—Å—Å–∫–∏–π';

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            const message = await bot.sendMessage(chatId, '–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏—Å—Ç—É–ø–æ–≤\n\n–ï—Å–ª–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å, —Ç–æ –∑–Ω–∞—á–æ–∫ –ø–æ–∫–∞–∂–µ—Ç, –±—ã–ª –ª–∏ —É –≤–∞—Å –ø—Ä–∏—Å—Ç—É–ø:\nüî∏ ‚Äî –ü—Ä–∏—Å—Ç—É–ø –±–µ–∑ –ø—Ä–∏–µ–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤\nüî∫ ‚Äî –ü—Ä–∏—Å—Ç—É–ø —Å –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏', {
                reply_markup: {
                    inline_keyboard: [] // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∞—à–∏ –∫–Ω–æ–ø–∫–∏
                }
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.userMessageIds[chatId] = message.message_id;

            if (userLanguage === 'English') {
                await seizureCalendarEnglish(bot, chatId);
            } else {
                await seizureCalendarRussian(bot, chatId, message.message_id); // –ü–µ—Ä–µ–¥–∞–µ–º messageId
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'seizure_calendar'
        else if (data === 'seizure_calendar') {
            const userLanguage = userLanguages[chatId] || '–†—É—Å—Å–∫–∏–π';
            let message;

            // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
            if (userLanguage === 'English') {
                message = await seizureCalendarEnglish(bot, chatId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            } else {
                message = await seizureCalendarRussian(bot, chatId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            bot.userMessageIds[chatId] = message.message_id;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
        else if (data.startsWith('change_month_')) {
            const monthOffset = parseInt(data.split('_')[2]);
            const userLanguage = userLanguages[chatId] || '–†—É—Å—Å–∫–∏–π';
            const messageId = bot.userMessageIds[chatId]; // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π message_id

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞ –∏ –≤—ã–∑–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
            if (userLanguage === 'English') {
                await handleChangeMonthEnglish(bot, chatId, monthOffset, messageId); // –ü–µ—Ä–µ–¥–∞–µ–º message_id
            } else {
                await handleChangeMonthRussian(bot, chatId, monthOffset, messageId); // –ü–µ—Ä–µ–¥–∞–µ–º message_id
            }

            await bot.answerCallbackQuery(callbackQuery.id); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤—Ä–∞—á–æ–º
        else if (data === 'doctor_connection') {
            const userLanguage = userLanguages[chatId] || '–†—É—Å—Å–∫–∏–π';
            if (userLanguage === 'English') {
                await handleDoctorConnectionEnglish(bot, chatId);
            } else {
                await handleDoctorConnectionRussian(bot, chatId);
            }
        }
        else if (data === 'send_message') {
            const userLanguage = userLanguages[chatId] || '–†—É—Å—Å–∫–∏–π';
            if (userLanguage === 'English') {
                await handleSendMessageEnglish(bot, chatId);
            } else {
                await handleSendMessageRussian(bot, chatId);
            }
        }
        else if (data === 'view_messages') {
            const userLanguage = userLanguages[chatId] || '–†—É—Å—Å–∫–∏–π';
            if (userLanguage === 'English') {
                await handleViewMessagesEnglish(bot, chatId);
            } else {
                await handleViewMessagesRussian(bot, chatId);
            }
        }
        else {
            const userLanguage = userLanguages[chatId] || '–†—É—Å—Å–∫–∏–π';
            if (userLanguage === 'English') {
                await handleCallbackQueryEnglish(bot, callbackQuery);
            } else {
                await handleCallbackQueryRussian(bot, callbackQuery);
            }
        }
    });
}).catch(err => {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
});
