const db = require('../config/db');
const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');
const replyData = new Map();
const waitingForReply = new Set();
const waitingForName = new Set();
const waitingForDescription = new Set();

async function initializeDoctorOfficeRussian(bot, chatId, messageId, doctorKey) {
    try {
        await bot.editMessageText(`–ó–∞–ø–∏—Å–∞–ª, –≤–∞—à–∞ —Ä–æ–ª—å: –í—Ä–∞—á. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.`, {
            chat_id: chatId,
            message_id: messageId,
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        waitingForName.add(chatId);

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤—Ä–∞—á–∞:', err);
        throw err;
    }
}


async function showDoctorMainMenu(bot, chatId, doctorKey) {
    const options = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤', callback_data: 'patient_list_page_1' }],
                [{ text: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'doctor_reregistration' }]
            ],
        },
    };

    if (doctorKey) {
        await bot.sendMessage(chatId, `–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á: ${doctorKey}. –°–æ–æ–±—â–∏—Ç–µ –µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n–î–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu.`);
    }

    const doctor = await db.query('SELECT doctor_key FROM doctors WHERE chat_id = $1', [chatId]);

    if (doctor.rows.length > 0) {
        const dbDoctorKey = doctor.rows[0].doctor_key;
        const message = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–±–∏–Ω–µ—Ç –≤—Ä–∞—á–∞!\n\n–í–∞—à –∫–ª—é—á:\n<code>${dbDoctorKey}</code>`;
        await bot.sendMessage(chatId, message, { parse_mode: "HTML" });
    }

    await bot.sendMessage(chatId, `–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, options);
}

async function handlePatientListPageRussian(bot, chatId, messageId, data) {
    try {
        const page = parseInt(data.split('_').pop(), 10);

        const doctorResult = await db.query('SELECT doctor_key FROM doctors WHERE chat_id = $1', [chatId]);
        const doctorKey = doctorResult.rows[0]?.doctor_key;

        if (!doctorKey) {
            await bot.editMessageText("–û—à–∏–±–∫–∞: –∫–ª—é—á –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", {
                chat_id: chatId,
                message_id: messageId
            });
            return;
        }

        const result = await db.query(`
            WITH LastMessages AS (
                SELECT 
                    user_id,
                    MAX(message_date) as last_message_date
                FROM messages 
                WHERE doctor_key = $1 
                GROUP BY user_id
            )
            SELECT 
                u.chat_id, 
                u.name, 
                u.fio,
                COUNT(CASE WHEN m.isRead = false THEN 1 END) as unread_count,
                COALESCE(lm.last_message_date, '1970-01-01'::timestamp) as last_message_date
            FROM users u
            LEFT JOIN messages m ON u.chat_id = m.user_id AND m.doctor_key = $1
            LEFT JOIN LastMessages lm ON u.chat_id = lm.user_id
            WHERE u.doctor_key = $1
            GROUP BY u.chat_id, u.name, u.fio, lm.last_message_date
            ORDER BY last_message_date DESC
        `, [doctorKey]);

        const patients = result.rows;

        let patientButtons = [];

        if (patients.length > 0) {
            for (let i = 0; i < patients.length; i++) {
                const unreadIcon = patients[i].unread_count > 0 ? 'üî¥ ' : '';
                patientButtons.push({
                    text: `${unreadIcon}${patients[i].name}`,
                    callback_data: `patient_index_${i + 1}_${patients[i].chat_id}`
                });
            }

            for (let i = patients.length; i < 9; i++) {
                patientButtons.push({ text: ' ', callback_data: 'no_action' });
            }
        } else {
            for (let i = 0; i < 9; i++) {
                patientButtons.push({ text: ' ', callback_data: 'no_action' });
            }
        }

        const patientRows = [];
        for (let i = 0; i < patientButtons.length; i += 3) {
            patientRows.push(patientButtons.slice(i, i + 3));
        }

        const navigationButtons = [
            { text: '‚¨ÖÔ∏è –í–ª–µ–≤–æ', callback_data: page > 1 ? `patient_list_page_${page - 1}` : 'no_action' },
            { text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'doctor_menu' },
            { text: '–í–ø—Ä–∞–≤–æ ‚û°Ô∏è', callback_data: `patient_list_page_${page + 1}` },
        ];
        patientRows.push(navigationButtons);

        await bot.editMessageText(`–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: patientRows,
            },
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:', err);
        throw err;
    }
}


async function handlePatientSelectionRussian(bot, chatId, messageId, data) {
    try {
        const [, , patientIndex, patientChatId] = data.split('_');
        const doctorResult = await db.query('SELECT doctor_key FROM doctors WHERE chat_id = $1', [chatId]);
        const doctorKey = doctorResult.rows[0]?.doctor_key;

        const patientResult = await db.query('SELECT name FROM users WHERE chat_id = $1 AND doctor_key = $2', [patientChatId, doctorKey]);
        const patientName = patientResult.rows[0]?.name;

        if (!patientName) {
            await bot.editMessageText("–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", {
                chat_id: chatId,
                message_id: messageId
            });
            return;
        }

        const banResult = await db.query('SELECT id FROM bans WHERE user_id = $1 AND doctor_key = $2', [patientChatId, doctorKey]);
        const isBanned = banResult.rows.length > 0;

        const banButton = isBanned ?
            { text: '–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–∏—Å–∞—Ç—å', callback_data: `unban_patient_index_${patientIndex}_${patientChatId}` } :
            { text: '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–∏—Å–∞—Ç—å', callback_data: `ban_patient_index_${patientIndex}_${patientChatId}` };

        await bot.editMessageText(`–ü–∞—Ü–∏–µ–Ω—Ç: ${patientName}${isBanned ? ' (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)' : ''}`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ', callback_data: `patient_info_index_${patientIndex}_${patientChatId}` }],
                    [{ text: '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', callback_data: `unread_messages_patient_index_${patientIndex}_${patientChatId}` }],
                    [{ text: '–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏', callback_data: `send_history_index_${patientIndex}_${patientChatId}` }],
                    [banButton],
                    [{ text: '–£–¥–∞–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞', callback_data: `delete_patient_index_${patientIndex}_${patientChatId}` }],
                    [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data: `patient_list_page_1` }]
                ],
            },
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', err);
        throw err;
    }
}

async function handleDeletePatient(bot, chatId, messageId, data) {
    try {
        const [, , , patientIndex, patientChatId] = data.split('_');

        await db.query(`
            UPDATE users 
            SET doctor_key = NULL, key_valid = false 
            WHERE chat_id = $1
        `, [patientChatId]);

        await bot.editMessageText('–ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤', callback_data: 'patient_list_page_1' }]
                ]
            }
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç—É
        await bot.sendMessage(patientChatId, '–í—ã –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç –≤—Ä–∞—á–∞. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –∫–ª—é—á.');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', err);
        throw err;
    }
}

async function handlePatientInfoRequestRussian(bot, chatId, messageId, data) {
    try {
        const [, , , patientIndex, patientChatId] = data.split('_');

        const doctorResult = await db.query('SELECT doctor_key FROM doctors WHERE chat_id = $1', [chatId]);
        const doctorKey = doctorResult.rows[0]?.doctor_key;

        const patientResult = await db.query(
            'SELECT name, fio, language, gender FROM users WHERE chat_id = $1 AND doctor_key = $2',
            [patientChatId, doctorKey]
        );

        if (patientResult.rows.length === 0) {
            await bot.editMessageText("–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", {
                chat_id: chatId,
                message_id: messageId
            });
            return;
        }

        const patient = patientResult.rows[0];
        const chatInfo = await bot.getChat(patientChatId);
        const telegramUsername = chatInfo.username ? `@${chatInfo.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω';

        const messageText = `–ü–∞—Ü–∏–µ–Ω—Ç ${patient.name}\n\n` +
            `–§–ò–û: ${patient.fio}\n` +
            `–Ø–∑—ã–∫: ${patient.language}\n` +
            `–ü–æ–ª: ${patient.gender}\n` +
            `–õ–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${telegramUsername}`;

        await bot.editMessageText(messageText, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: `patient_index_${patientIndex}_${patientChatId}` }]
                ],
            },
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ:', err);
        throw err;
    }
}


async function handleBanPatient(bot, chatId, messageId, data) {
    try {
        const [, , , patientIndex, patientChatId] = data.split('_');

        const doctorResult = await db.query('SELECT doctor_key FROM doctors WHERE chat_id = $1', [chatId]);
        const doctorKey = doctorResult.rows[0]?.doctor_key;

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É bans
        await db.query(`
            INSERT INTO bans (user_id, doctor_key)
            VALUES ($1, $2)
            ON CONFLICT (user_id, doctor_key) DO NOTHING
        `, [patientChatId, doctorKey]);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const patientResult = await db.query('SELECT chat_id, name FROM users WHERE chat_id = $1', [patientChatId]);
        const patientName = patientResult.rows[0]?.name;

        await bot.sendMessage(patientChatId, '–í—Ä–∞—á –æ–≥—Ä–∞–Ω–∏—á–∏–ª –≤–∞—à—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.');

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        await bot.editMessageText(`–ü–∞—Ü–∏–µ–Ω—Ç: ${patientName} (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ', callback_data: `patient_info_index_${patientIndex}_${patientChatId}` }],
                    [{ text: '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', callback_data: `unread_messages_patient_index_${patientIndex}_${patientChatId}` }],
                    [{ text: '–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏', callback_data: `send_history_index_${patientIndex}_${patientChatId}` }],
                    [{ text: '–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–∏—Å–∞—Ç—å', callback_data: `unban_patient_index_${patientIndex}_${patientChatId}` }],
                    [{ text: '–£–¥–∞–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞', callback_data: `delete_patient_index_${patientIndex}_${patientChatId}` }],
                    [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data: 'patient_list_page_1' }]
                ],
            },
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', err);
        throw err;
    }
}

async function handleUnbanPatient(bot, chatId, messageId, data) {
    try {
        const [, , , patientIndex, patientChatId] = data.split('_');

        const doctorResult = await db.query('SELECT doctor_key FROM doctors WHERE chat_id = $1', [chatId]);
        const doctorKey = doctorResult.rows[0]?.doctor_key;

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã bans
        await db.query(`
            DELETE FROM bans 
            WHERE user_id = $1 AND doctor_key = $2
        `, [patientChatId, doctorKey]);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const patientResult = await db.query('SELECT chat_id, name FROM users WHERE chat_id = $1', [patientChatId]);
        const patientName = patientResult.rows[0]?.name;

        await bot.sendMessage(patientChatId, '–í—Ä–∞—á —Å–Ω—è–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.');

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        await bot.editMessageText(`–ü–∞—Ü–∏–µ–Ω—Ç: ${patientName}`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ', callback_data: `patient_info_index_${patientIndex}_${patientChatId}` }],
                    [{ text: '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', callback_data: `unread_messages_patient_index_${patientIndex}_${patientChatId}` }],
                    [{ text: '–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏', callback_data: `send_history_index_${patientIndex}_${patientChatId}` }],
                    [{ text: '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–∏—Å–∞—Ç—å', callback_data: `ban_patient_index_${patientIndex}_${patientChatId}` }],
                    [{ text: '–£–¥–∞–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞', callback_data: `delete_patient_index_${patientIndex}_${patientChatId}` }],
                    [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data: 'patient_list_page_1' }]
                ],
            },
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', err);
        throw err;
    }
}

async function handleMessageHistoryRequestRussian(bot, chatId, messageId, data) {
    try {
        const parts = data.split('_');
        const patientIndex = parseInt(parts[3]);
        const patientChatId = parts[4];

        const doctorResult = await db.query('SELECT doctor_key FROM doctors WHERE chat_id = $1', [chatId]);
        const doctorKey = doctorResult.rows[0]?.doctor_key;

        if (!doctorKey) {
            await bot.editMessageText("–û—à–∏–±–∫–∞: –∫–ª—é—á –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", {
                chat_id: chatId,
                message_id: messageId
            });
            return;
        }

        const patientResult = await db.query(
            'SELECT name FROM users WHERE chat_id = $1 AND doctor_key = $2',
            [patientChatId, doctorKey]
        );

        if (patientResult.rows.length === 0) {
            await bot.editMessageText("–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", {
                chat_id: chatId,
                message_id: messageId
            });
            return;
        }

        const patient = patientResult.rows[0];

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        const messages = await db.query(`
            SELECT user_id AS patient_id, doctor_key, message_text, message_date, sender_type
            FROM messages
            WHERE doctor_key = $1 AND user_id = $2

            UNION ALL

            SELECT patient_id, doctor_key, message_text, message_date, NULL AS sender_type
            FROM doctors_messages
            WHERE doctor_key = $1 AND patient_id = $2
            ORDER BY message_date DESC
        `, [doctorKey, patientChatId]);

        if (messages.rows.length > 0) {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
            const excelData = [];
            excelData.push(['–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è']); // –ó–∞–≥–æ–ª–æ–≤–æ–∫

            messages.rows.forEach(msg => {
                const sender = msg.sender_type === 'patient' ? patient.name : '–í—Ä–∞—á';
                const date = new Date(msg.message_date).toLocaleString(); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É

                excelData.push([sender, msg.message_text, date]);
            });

            // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç Excel
            const ws = XLSX.utils.aoa_to_sheet(excelData);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Messages');

            const wscols = [
                { wpx: 100 },
                { wpx: 300 },
                { wpx: 150 }
            ];
            ws['!cols'] = wscols;

            const borderStyle = {
                top: { style: 'thin', color: { rgb: '000000' } },
                left: { style: 'thin', color: { rgb: '000000' } },
                bottom: { style: 'thin', color: { rgb: '000000' } },
                right: { style: 'thin', color: { rgb: '000000' } }
            };

            const fillStyle = {
                fill: {
                    fgColor: { rgb: 'D0EFFF' }
                }
            };

            for (let row = 0; row < excelData.length; row++) {
                for (let col = 0; col < excelData[row].length; col++) {
                    const cell = ws[XLSX.utils.encode_cell({ r: row, c: col })];

                    if (!cell) continue;

                    if (row === 0) {
                        cell.s = { border: borderStyle, fill: fillStyle, font: { bold: true } };
                    } else {
                        cell.s = { border: borderStyle };
                    }
                }
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel —Ñ–∞–π–ª
            const dirPath = path.join(__dirname, '../../public');
            const filePath = path.join(dirPath, `messages_${patientChatId}.xlsx`);

            XLSX.writeFile(wb, filePath);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.sendMessage(chatId, `–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º ${patient.name}:`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥ –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É', callback_data: `patient_index_${patientIndex}_${patientChatId}` }]
                    ]
                }
            });

            await bot.sendDocument(chatId, fs.createReadStream(filePath), {}, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥ –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É', callback_data: `patient_index_${patientIndex}_${patientChatId}` }]
                    ]
                }
            });

            fs.unlink(filePath, (err) => {
                if (err) console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', err);
            });
        } else {
            await bot.editMessageText(`–£ –ø–∞—Ü–∏–µ–Ω—Ç–∞ ${patient.name} –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.`, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥ –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É', callback_data: `patient_index_${patientIndex}_${patientChatId}` }]
                    ]
                }
            });
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
        throw err;
    }
}


async function handleUnreadMessagesForPatient(bot, chatId, messageId, data) {
    try {
        const doctorResult = await db.query('SELECT doctor_key FROM doctors WHERE chat_id = $1', [chatId]);
        const doctorKey = doctorResult.rows[0]?.doctor_key;

        if (!doctorKey) {
            await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: –∫–ª—é—á –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        // –ù–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ unread_messages_patient_index_1_12345
        const parts = data.split('_');
        const patientIndex = parseInt(parts[4]);
        const patientChatId = parts[5];

        await bot.deleteMessage(chatId, messageId).catch(() => {});

        const unreadMessages = await db.query(`
            SELECT * FROM messages 
            WHERE user_id = $1 
            AND doctor_key = $2 
            AND isRead = false 
            AND sender_type = 'patient'
            ORDER BY message_date DESC
        `, [patientChatId, doctorKey]);

        const patient = await db.query('SELECT name FROM users WHERE chat_id = $1', [patientChatId]);
        const patientName = patient.rows[0]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç';

        if (unreadMessages.rows.length === 0) {
            await bot.sendMessage(chatId, `–£ –ø–∞—Ü–∏–µ–Ω—Ç–∞ ${patientName} –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`, {
                reply_markup: {
                    inline_keyboard: [[
                        { text: '–ù–∞–∑–∞–¥ –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É', callback_data: `patient_index_${patientIndex}_${patientChatId}` }
                    ]]
                }
            });
            return;
        }

        for (const msg of unreadMessages.rows) {
            let messageText = `–û—Ç: ${patientName}\n`;
            messageText += `–î–∞—Ç–∞: ${new Date(msg.message_date).toLocaleString()}\n`;
            messageText += msg.isFile ? `–§–∞–π–ª: ${msg.fileName}\n` : `–°–æ–æ–±—â–µ–Ω–∏–µ: ${msg.message_text}`;

            const callbackData = `reply_to_${msg.message_id}_${patientIndex}_${patientChatId}`;
            await bot.sendMessage(chatId, messageText, {
                reply_markup: {
                    inline_keyboard: [[
                        { text: '–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: callbackData }
                    ]]
                }
            });
        }

        await bot.sendMessage(chatId, '–í—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', {
            reply_markup: {
                inline_keyboard: [[
                    { text: '–ù–∞–∑–∞–¥ –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É', callback_data: `patient_index_${patientIndex}_${patientChatId}` }
                ]]
            }
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.');
    }
}

async function handleReplyToMessage(bot, chatId, messageId, data) {
    try {
        // –ù–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ reply_to_messageId_patientIndex_patientChatId
        const parts = data.split('_');
        const originalMessageId = parts[2];
        const patientIndex = parts[3];
        const patientChatId = parts[4];

        replyData.set(chatId, {
            originalMessageId,
            patientIndex,
            userId: patientChatId
        });

        waitingForReply.add(chatId);

        await bot.deleteMessage(chatId, messageId);

        await bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:', {
            reply_markup: {
                force_reply: true,
                selective: true
            }
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –æ—Ç–≤–µ—Ç—É:', err);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –æ—Ç–≤–µ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
}

async function handleMarkAsRead(bot, chatId, messageId, data) {
    try {
        const messageIdToMark = data.split('_')[2];

        await db.query('UPDATE messages SET isRead = TRUE WHERE message_id = $1', [messageIdToMark]);

        await handleUnreadMessagesForPatient(bot, chatId, messageId, data);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', err);
        throw err;
    }
}

async function handleDoctorMenuReturnRussian(bot, chatId, messageId) {
    try {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await bot.deleteMessage(chatId, messageId);

        const doctorResult = await db.query('SELECT doctor_key FROM doctors WHERE chat_id = $1', [chatId]);
        const doctorKey = doctorResult.rows[0]?.doctor_key;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await showDoctorMainMenu(bot, chatId, null);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –≤—Ä–∞—á–∞:', err);
        throw err;
    }
}

async function handleDoctorCallbackRussian(bot, callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const data = callbackQuery.data;

    try {
        if (data.startsWith('patient_list_page_')) {
            await handlePatientListPageRussian(bot, chatId, messageId, data);
        }
        else if (data.startsWith('patient_index_')) {
            await handlePatientSelectionRussian(bot, chatId, messageId, data);
        }
        else if (data.startsWith('send_history_index_')) {
            // –û–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            await handleMessageHistoryRequestRussian(bot, chatId, messageId, data);
        }
        else if (data === 'doctor_menu') {
            await handleDoctorMenuReturnRussian(bot, chatId, messageId);
        }
        else if (data.startsWith('unread_messages_patient_index_')) {
            // –û–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            await handleUnreadMessagesForPatient(bot, chatId, messageId, data);
        }
        else if (data.startsWith('reply_to_')) {
            await handleReplyToMessage(bot, chatId, messageId, data);
        }
        else if (data.startsWith('mark_read_')) {
            await handleMarkAsRead(bot, chatId, messageId, data);
        }
        else if (data.startsWith('delete_patient_index_')) {
            await handleDeletePatient(bot, chatId, messageId, data);
        }
        else if (data.startsWith('ban_patient_index_')) {
            await handleBanPatient(bot, chatId, messageId, data);
        }
        else if (data.startsWith('unban_patient_index_')) {
            await handleUnbanPatient(bot, chatId, messageId, data);
        }
        else if (data.startsWith('patient_info_index_')) {
            await handlePatientInfoRequestRussian(bot, chatId, messageId, data);
        }
        else if (data.startsWith('doctor_reregistration')) {
            await db.query('DELETE FROM doctors_messages WHERE doctor_id = $1', [chatId]);
            await db.query('DELETE FROM messages WHERE doctor_key = (SELECT doctor_key FROM doctors WHERE chat_id = $1)', [chatId]);
            await db.query('DELETE FROM doctors WHERE chat_id = $1', [chatId]);
            await bot.sendMessage(chatId, '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–∞—á–∞ –±—ã–ª —É–¥–∞–ª–µ–Ω.\n–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–∞—á–∞:', err);
        throw err;
    }
}

async function handleDoctorMessage(bot, msg) {
    const chatId = msg.chat.id;
    const messageText = msg.text;

    if (waitingForName.has(chatId)) {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –≤—Ä–∞—á–∞
            await db.query('UPDATE doctors SET name = $1 WHERE chat_id = $2', [messageText, chatId]);
            waitingForName.delete(chatId);

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            waitingForDescription.add(chatId);
            await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –§–ò–û –≤—Ä–∞—á–∞:', err);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    } else if (waitingForDescription.has(chatId)) {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–∞
            await db.query('UPDATE doctors SET description = $1 WHERE chat_id = $2', [messageText, chatId]);
            waitingForDescription.delete(chatId);

            // –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            const doctorResult = await db.query('SELECT doctor_key FROM doctors WHERE chat_id = $1', [chatId]);
            const doctorKey = doctorResult.rows[0]?.doctor_key;
            await showDoctorMainMenu(bot, chatId, doctorKey);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤—Ä–∞—á–∞:', err);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    } else if (waitingForReply.has(chatId)) {
        try {
            const replyInfo = replyData.get(chatId);
            if (!replyInfo) {
                throw new Error('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const doctorResult = await db.query('SELECT doctor_key FROM doctors WHERE chat_id = $1', [chatId]);
            const doctorKey = doctorResult.rows[0]?.doctor_key;

            if (!doctorKey) {
                throw new Error('–ö–ª—é—á –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const patientResult = await db.query(
                'SELECT chat_id FROM users WHERE chat_id = $1 AND doctor_key = $2',
                [replyInfo.userId, doctorKey]
            );

            if (patientResult.rows.length === 0) {
                throw new Error('–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            await bot.sendMessage(replyInfo.userId, `–û—Ç–≤–µ—Ç –æ—Ç –≤—Ä–∞—á–∞:\n${messageText}`);

            await db.query(
                'INSERT INTO doctors_messages (doctor_id, patient_id, message_text, message_date, doctor_key) VALUES ($1, $2, $3, NOW(), $4)',
                [chatId, replyInfo.userId, messageText, doctorKey]
            );

            if (replyInfo.originalMessageId) {
                await db.query(
                    'UPDATE messages SET isRead = TRUE WHERE message_id = $1 AND user_id = $2 AND doctor_key = $3',
                    [replyInfo.originalMessageId, replyInfo.userId, doctorKey]
                );
            }

            waitingForReply.delete(chatId);
            replyData.delete(chatId);

            await bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');

            await bot.sendMessage(chatId, '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É', {
                reply_markup: {
                    inline_keyboard: [[
                        { text: '–ù–∞–∑–∞–¥ –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É', callback_data: `patient_index_${replyInfo.patientIndex}_${replyInfo.userId}` }
                    ]]
                }
            });
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:', err);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    }
}

async function handleMenuCommand(bot, msg) {
    const chatId = msg.chat.id;
    try {
        const doctorResult = await db.query('SELECT doctor_key FROM doctors WHERE chat_id = $1', [chatId]);
        const doctorKey = doctorResult.rows[0]?.doctor_key;

        if (doctorKey) {
            await showDoctorMainMenu(bot, chatId, null);
        } else {
            await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é –≤—Ä–∞—á–∞.');
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é:', err);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.');
    }
}
module.exports = {
    initializeDoctorOfficeRussian,
    showDoctorMainMenu,
    handlePatientListPageRussian,
    handlePatientSelectionRussian,
    handleMessageHistoryRequestRussian,
    handleDoctorMenuReturnRussian,
    handleDoctorCallbackRussian,
    handleUnreadMessagesForPatient,
    handleReplyToMessage,
    handleDoctorMessage,
    handleMenuCommand
};