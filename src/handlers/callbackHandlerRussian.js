// callbackHandlerRussian.js
const db = require('../config/db');
const doctorOfficeHandlerRussian = require('./doctorOfficeHandlerRussian');

module.exports = async function handleCallbackQueryRussian(bot, callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const data = callbackQuery.data;
    try {
        if (data === 'role_patient') {
            const doctorLanguageResult = await db.query('SELECT language FROM doctors WHERE chat_id = $1', [chatId]);
            const language = doctorLanguageResult.rows.length > 0 ? doctorLanguageResult.rows[0].language : '–†—É—Å—Å–∫–∏–π';

            await db.query('DELETE FROM doctors WHERE chat_id = $1', [chatId]);
            await db.query('INSERT INTO users (chat_id, language) VALUES ($1, $2) ON CONFLICT (chat_id) DO NOTHING', [chatId, language]);
            await db.query('UPDATE users SET step = $1 WHERE chat_id = $2', ['gender_choice', chatId]);

            await bot.editMessageText(`–ó–∞–ø–∏—Å–∞–ª, –≤–∞—à–∞ —Ä–æ–ª—å: –ü–∞—Ü–∏–µ–Ω—Ç.`, {
                chat_id: chatId,
                message_id: messageId,
            });

            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–ú—É–∂—Å–∫–æ–π', callback_data: 'gender_male'},
                            {text: '–ñ–µ–Ω—Å–∫–∏–π', callback_data: 'gender_female'},
                        ],
                    ],
                },
            };
            bot.sendMessage(chatId, '–í–∞—à –ø–æ–ª?', options);

        } else if (data === 'gender_male' || data === 'gender_female') {
            const gender = data === 'gender_male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π';

            await db.query('UPDATE users SET gender = $1, step = $2 WHERE chat_id = $3', [gender, 'timezone', chatId]);

            await bot.editMessageText(`–ó–∞–ø–∏—Å–∞–ª, –≤–∞—à –ø–æ–ª: ${gender}`, {
                chat_id: chatId,
                message_id: messageId,
            });

            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–ú—Å–∫ -15', callback_data: 'tz_msk_-15'},
                            {text: '–ú—Å–∫ -14', callback_data: 'tz_msk_-14'},
                            {text: '–ú—Å–∫ -13', callback_data: 'tz_msk_-13'},
                            {text: '–ú—Å–∫ -12', callback_data: 'tz_msk_-12'},
                        ],
                        [
                            {text: '–ú—Å–∫ -11', callback_data: 'tz_msk_-11'},
                            {text: '–ú—Å–∫ -10', callback_data: 'tz_msk_-10'},
                            {text: '–ú—Å–∫ -9', callback_data: 'tz_msk_-9'},
                            {text: '–ú—Å–∫ -8', callback_data: 'tz_msk_-8'},
                        ],
                        [
                            {text: '–ú—Å–∫ -7', callback_data: 'tz_msk_-7'},
                            {text: '–ú—Å–∫ -6', callback_data: 'tz_msk_-6'},
                            {text: '–ú—Å–∫ -5', callback_data: 'tz_msk_-5'},
                            {text: '–ú—Å–∫ -4', callback_data: 'tz_msk_-4'},
                        ],
                        [
                            {text: '–ú—Å–∫ -3', callback_data: 'tz_msk_-3'},
                            {text: '–ú—Å–∫ -2', callback_data: 'tz_msk_-2'},
                            {text: '–ú—Å–∫ -1', callback_data: 'tz_msk_-1'},
                            {text: '–ú—Å–∫ +1', callback_data: 'tz_msk_+1'},
                        ],
                        [
                            {text: '–ú—Å–∫ +2', callback_data: 'tz_msk_+2'},
                            {text: '–ú—Å–∫ +3', callback_data: 'tz_msk_+3'},
                            {text: '–ú—Å–∫ +4', callback_data: 'tz_msk_+4'},
                            {text: '–ú—Å–∫ +5', callback_data: 'tz_msk_+5'},
                        ],
                        [
                            {text: '–ú–æ—Å–∫–≤–∞', callback_data: 'tz_msk_0'},
                        ],
                    ],
                },
            };
            bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É —Å –ú–æ—Å–∫–≤–æ–π:', options);

        } else if (data.startsWith('tz_msk_')) {
            const timezoneOffsetMsk = parseInt(data.split('_')[2]);
            const timezoneOffsetGmt = timezoneOffsetMsk + 3;

            await db.query('UPDATE users SET timezone_gmt = $1, step = $2 WHERE chat_id = $3', [timezoneOffsetGmt, 'notification_period', chatId]);

            await bot.editMessageText(`–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: GMT${timezoneOffsetGmt >= 0 ? '+' : ''}${timezoneOffsetGmt}`, {
                chat_id: chatId,
                message_id: messageId,
            });

            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–£—Ç—Ä–æ–º', callback_data: 'time_morning'},
                            {text: '–î–Ω–µ–º', callback_data: 'time_afternoon'},
                            {text: '–í–µ—á–µ—Ä–æ–º', callback_data: 'time_evening'},
                        ],
                    ],
                },
            };
            bot.sendMessage(chatId, '–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?', options);

        } else if (data === 'time_morning' || data === 'time_afternoon' || data === 'time_evening') {
            const time = data === 'time_morning' ? '–£—Ç—Ä–æ–º' : data === 'time_afternoon' ? '–î–Ω–µ–º' : '–í–µ—á–µ—Ä–æ–º';

            await db.query('UPDATE users SET notification_period = $1 WHERE chat_id = $2', [time, chatId]);

            await bot.editMessageText(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${time}`, {
                chat_id: chatId,
                message_id: messageId,
            });

            let hoursOptions = [];
            if (time === '–£—Ç—Ä–æ–º') {
                hoursOptions = [
                    {text: '6:00', callback_data: 'hour_6'},
                    {text: '7:00', callback_data: 'hour_7'},
                    {text: '8:00', callback_data: 'hour_8'},
                    {text: '9:00', callback_data: 'hour_9'},
                    {text: '10:00', callback_data: 'hour_10'},
                    {text: '11:00', callback_data: 'hour_11'}
                ];
            } else if (time === '–î–Ω–µ–º') {
                hoursOptions = [
                    {text: '12:00', callback_data: 'hour_12'},
                    {text: '13:00', callback_data: 'hour_13'},
                    {text: '14:00', callback_data: 'hour_14'},
                    {text: '15:00', callback_data: 'hour_15'},
                    {text: '16:00', callback_data: 'hour_16'},
                    {text: '17:00', callback_data: 'hour_17'}
                ];
            } else if (time === '–í–µ—á–µ—Ä–æ–º') {
                hoursOptions = [
                    {text: '18:00', callback_data: 'hour_18'},
                    {text: '19:00', callback_data: 'hour_19'},
                    {text: '20:00', callback_data: 'hour_20'},
                    {text: '21:00', callback_data: 'hour_21'},
                    {text: '22:00', callback_data: 'hour_22'},
                    {text: '23:00', callback_data: 'hour_23'},
                ];
            }

            const changePeriodOptions = [];
            if (time === '–£—Ç—Ä–æ–º') {
                changePeriodOptions.push(
                    {text: '–î–µ–Ω—å', callback_data: 'time_afternoon'},
                    {text: '–í–µ—á–µ—Ä', callback_data: 'time_evening'}
                );
            } else if (time === '–î–Ω–µ–º') {
                changePeriodOptions.push(
                    {text: '–£—Ç—Ä–æ', callback_data: 'time_morning'},
                    {text: '–í–µ—á–µ—Ä', callback_data: 'time_evening'}
                );
            } else if (time === '–í–µ—á–µ—Ä–æ–º') {
                changePeriodOptions.push(
                    {text: '–£—Ç—Ä–æ', callback_data: 'time_morning'},
                    {text: '–î–µ–Ω—å', callback_data: 'time_afternoon'}
                );
            }

            const hourOptions = {
                reply_markup: {
                    inline_keyboard: [
                        hoursOptions,
                        changePeriodOptions
                    ],
                },
            };

            bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', hourOptions);

        } else if (data.startsWith('hour_') && !data.endsWith('_edit')) {
            const hour = data.split('_')[1];

            const user = await db.query('SELECT timezone_gmt FROM users WHERE chat_id = $1', [chatId]);
            const timezoneOffsetGmt = user.rows[0].timezone_gmt;

            const hourMsk = hour - timezoneOffsetGmt + 3;
            await db.query('UPDATE users SET notification_hour_msk = $1 WHERE chat_id = $2', [hourMsk, chatId]);

            const gmtHour = (parseInt(hour) - timezoneOffsetGmt + 24) % 24;

            await db.query('UPDATE users SET notification_hour_gmt = $1 WHERE chat_id = $2', [gmtHour, chatId]);
            await db.query('UPDATE users SET step = $1 WHERE chat_id = $2', ['registered', chatId])
            await bot.editMessageText(`–ó–∞–ø–∏—Å–∞–ª –≤–∞—à–µ –≤—Ä–µ–º—è: ${hour}:00 –ø–æ –≤–∞—à–µ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É. –≠—Ç–æ +${timezoneOffsetGmt} GMT.`, {
                chat_id: chatId,
                message_id: messageId,
            });
            const finalMessage = `–û—Ç–ª–∏—á–Ω–æüëç, —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–∫–æ–Ω—á–∏–ª–∏!\n–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ —Å–µ–±–µ –ø–æ—Å–ª–µ ${hour}:00 –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n

–ï—Å–ª–∏ –≤–∞–º –∑–∞—Ö–æ—á–µ—Ç—Å—è —Å–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å!\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /myProfile`;
            await bot.sendMessage(chatId, finalMessage);

        } else if (data === 'role_doctor') {
            await bot.editMessageText(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å –í—Ä–∞—á? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.`, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–î–∞', callback_data: 'confirm_doctor'},
                            {text: '–ù–µ—Ç', callback_data: 'cancel_doctor'},
                        ],
                    ],
                },
            });

        } else if (data === 'confirm_doctor') {
            await db.query('DELETE FROM messages WHERE user_id = $1', [chatId]);
            await db.query('DELETE FROM calendar WHERE user_id = $1', [chatId]);
            await db.query('DELETE FROM users WHERE chat_id = $1', [chatId]);

            const doctorCheck = await db.query('SELECT * FROM doctors WHERE chat_id = $1', [chatId]);
            let doctorKey;

            if (doctorCheck.rows.length === 0) {
                doctorKey = Math.random().toString(36).substring(2, 10);
                await db.query(
                    'INSERT INTO doctors (chat_id, language, doctor_key) VALUES ($1, $2, $3)',
                    [chatId, '–†—É—Å—Å–∫–∏–π', doctorKey]
                );
            } else {
                doctorKey = doctorCheck.rows[0].doctor_key;
            }

            // –ü–æ—Å–ª–µ –±–∞–∑–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ doctorOfficeHandlerRussian
            await doctorOfficeHandlerRussian.initializeDoctorOfficeRussian(bot, chatId, messageId, doctorKey);

        } else if (data === 'cancel_doctor') {
            await bot.editMessageText('–í—ã–±–æ—Ä —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ.', {
                chat_id: chatId,
                message_id: messageId,
            });

            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–í—Ä–∞—á', callback_data: 'role_doctor' },
                            { text: '–ü–∞—Ü–∏–µ–Ω—Ç', callback_data: 'role_patient' },
                        ],
                    ],
                },
            };
            await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:', options);
        } else {
            // –ü–µ—Ä–µ–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ callback –∑–∞–ø—Ä–æ—Å—ã –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤—Ä–∞—á–∞
            await doctorOfficeHandlerRussian.handleDoctorCallbackRussian(bot, callbackQuery);
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:', err);
    }
};
