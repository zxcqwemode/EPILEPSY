const db = require('../../config/db');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
async function seizureCalendarRussian(bot, chatId, messageId, monthOffset = 0, selectedDay = null) {
    try {
        const today = new Date();
        let currentMonth = today.getMonth() + monthOffset;
        let currentYear = today.getFullYear();

        if (currentMonth < 0) {
            currentYear--;
            currentMonth = 12 + currentMonth;
        } else if (currentMonth > 11) {
            currentYear++;
            currentMonth = currentMonth - 12;
        }

        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();

        const result = await db.query(
            `SELECT * FROM calendar WHERE user_id = $1 AND EXTRACT(MONTH FROM date) = $2 AND EXTRACT(YEAR FROM date) = $3`,
            [chatId, currentMonth + 1, currentYear]
        );

        const calendarData = result.rows;

        const inlineKeyboard = [];
        let row = [];
        const firstDayOfMonth = new Date(currentYear, currentMonth, 1);
        const dayOfWeek = (firstDayOfMonth.getDay() + 6) % 7;

        inlineKeyboard.push([
            {
                text: `${new Date(currentYear, currentMonth).toLocaleString('ru-RU', { month: 'long', year: 'numeric' })}`,
                callback_data: 'no_action'
            }
        ]);

        const weekDays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
        inlineKeyboard.push(weekDays.map(day => ({ text: day, callback_data: 'no_action' })));

        for (let i = 0; i < dayOfWeek; i++) {
            row.push({ text: ' ', callback_data: 'no_action' });
        }

        for (let day = 1; day <= daysInMonth; day++) {
            const dayRecord = calendarData.find(entry => new Date(entry.date).getDate() === day);
            let buttonLabel = `${day}`;

            if (dayRecord) {
                if (dayRecord.had_seizure && dayRecord.medications) {
                    buttonLabel += ' üî∫';
                } else if (dayRecord.had_seizure && !dayRecord.medications) {
                    buttonLabel += ' üî∏';
                } else if (dayRecord.note) {
                    buttonLabel += ' ‚úÖ';
                }
            }

            row.push({
                text: buttonLabel,
                callback_data: `calendar_${day}_${monthOffset}`
            });

            if (row.length === 7) {
                inlineKeyboard.push(row);
                row = [];
            }
        }

        while (row.length < 7) {
            row.push({ text: ' ', callback_data: 'no_action' });
        }
        if (row.length) {
            inlineKeyboard.push(row);
        }

        const navigationRow = [];
        navigationRow.push({ text: '‚¨ÖÔ∏è', callback_data: `change_month_${monthOffset - 1}` });

        if (currentMonth < today.getMonth() || currentYear < today.getFullYear()) {
            navigationRow.push({ text: '‚û°Ô∏è', callback_data: `change_month_${monthOffset + 1}` });
        } else {
            navigationRow.push({ text: '‚û°Ô∏è', callback_data: 'no_action' });
        }

        inlineKeyboard.push(navigationRow);

        if (selectedDay) {
            const selectedDate = new Date(currentYear, currentMonth, selectedDay);
            const formattedDate = `${selectedDate.getFullYear()}-${(selectedDate.getMonth() + 1).toString().padStart(2, '0')}-${selectedDate.getDate().toString().padStart(2, '0')}`;
            inlineKeyboard.push([
                {
                    text: `–°–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ ${selectedDay} ${selectedDate.toLocaleString('ru-RU', { month: 'long' })}`,
                    callback_data: `start_record_${formattedDate}`
                }
            ]);
        }

        inlineKeyboard.push([{ text: '–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'back_to_profile' }]);

        await bot.editMessageText(
            `–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏—Å—Ç—É–ø–æ–≤\n\n–ï—Å–ª–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å, —Ç–æ –∑–Ω–∞—á–æ–∫ –ø–æ–∫–∞–∂–µ—Ç, –±—ã–ª –ª–∏ —É –≤–∞—Å –ø—Ä–∏—Å—Ç—É–ø:\nüî∏ ‚Äî –ü—Ä–∏—Å—Ç—É–ø –±–µ–∑ –ø—Ä–∏–µ–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤\nüî∫ ‚Äî –ü—Ä–∏—Å—Ç—É–ø —Å –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: { inline_keyboard: inlineKeyboard }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –¥–µ–Ω—å (—Ä—É—Å—Å–∫–∏–π)
async function handleDayPressRussian(bot, chatId, day, monthOffset) {
    const messageId = bot.userMessageIds[chatId]; // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π message_id
    await seizureCalendarRussian(bot, chatId, messageId, parseInt(monthOffset), parseInt(day));
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—è—Ü–∞ (—Ä—É—Å—Å–∫–∏–π)
async function handleChangeMonthRussian(bot, chatId, monthOffset, messageId) {
    await seizureCalendarRussian(bot, chatId, messageId, parseInt(monthOffset));
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏—Å—Ç—É–ø–∞ (—Ä—É—Å—Å–∫–∏–π)
async function recordSeizureRussian(bot, chatId, date) {
    const userId = chatId;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
    const formattedDate = date.toISOString().split('T')[0]; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É

    await db.query(
        `INSERT INTO calendar (user_id, date, had_seizure, created_at) VALUES ($1, $2, $3, $4)`,
        [userId, formattedDate, true, new Date()]
    );

    await bot.sendMessage(chatId, `–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ ${date.toLocaleString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })}`);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É (—Ä—É—Å—Å–∫–∏–π)
async function startRecording(bot, chatId, date) {

    await bot.sendMessage(chatId, `–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ ${date.toLocaleString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })}\n\n
    –£ –≤–∞—Å –±—ã–ª –ø—Ä–∏—Å—Ç—É–ø —ç–ø–∏–ª–µ–ø—Å–∏–∏?`, {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–î–∞', callback_data: `record_seizure_${date}`},
                    { text: '–ù–µ—Ç', callback_data: `record_no_seizure_${date}`}
                ]
            ]
        }
    });
}

module.exports = {
    seizureCalendarRussian,
    handleChangeMonthRussian,
    handleDayPressRussian,
    recordSeizureRussian,
    startRecording
};
