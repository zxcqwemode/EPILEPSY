const db = require('../../config/db');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
async function seizureCalendarRussian(bot, chatId, messageId, monthOffset = 0, selectedDay = null) {
    try {
        const today = new Date();
        let currentMonth = today.getMonth() + monthOffset;
        let currentYear = today.getFullYear();

        if (currentMonth < 0) {
            currentYear--;
            currentMonth = 12 + currentMonth;
        } else if (currentMonth > 11) {
            currentYear++;
            currentMonth = currentMonth - 12;
        }

        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();

        const result = await db.query(
            `SELECT * FROM calendar WHERE user_id = $1 AND EXTRACT(MONTH FROM date) = $2 AND EXTRACT(YEAR FROM date) = $3`,
            [chatId, currentMonth + 1, currentYear]
        );

        const calendarData = result.rows;

        const inlineKeyboard = [];
        let row = [];
        const firstDayOfMonth = new Date(currentYear, currentMonth, 1);
        const dayOfWeek = (firstDayOfMonth.getDay() + 6) % 7;

        inlineKeyboard.push([
            {
                text: `${new Date(currentYear, currentMonth).toLocaleString('ru-RU', { month: 'long', year: 'numeric' })}`,
                callback_data: 'no_action'
            }
        ]);

        const weekDays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
        inlineKeyboard.push(weekDays.map(day => ({ text: day, callback_data: 'no_action' })));

        for (let i = 0; i < dayOfWeek; i++) {
            row.push({ text: ' ', callback_data: 'no_action' });
        }

        for (let day = 1; day <= daysInMonth; day++) {
            const dayRecord = calendarData.find(entry => new Date(entry.date).getDate() === day);
            let buttonLabel = `${day}`;

            if (dayRecord) {
                if (dayRecord.had_seizure && dayRecord.medications) {
                    buttonLabel += ' üî∫';
                } else if (dayRecord.had_seizure && !dayRecord.medications) {
                    buttonLabel += ' üî∏';
                } else if (dayRecord.note) {
                    buttonLabel += ' ‚úÖ';
                }
            }

            row.push({
                text: buttonLabel,
                callback_data: `calendar_${day}_${monthOffset}`
            });

            if (row.length === 7) {
                inlineKeyboard.push(row);
                row = [];
            }
        }

        while (row.length < 7) {
            row.push({ text: ' ', callback_data: 'no_action' });
        }
        if (row.length) {
            inlineKeyboard.push(row);
        }

        const navigationRow = [];
        navigationRow.push({ text: '‚¨ÖÔ∏è', callback_data: `change_month_${monthOffset - 1}` });

        if (currentMonth < today.getMonth() || currentYear < today.getFullYear()) {
            navigationRow.push({ text: '‚û°Ô∏è', callback_data: `change_month_${monthOffset + 1}` });
        } else {
            navigationRow.push({ text: '‚û°Ô∏è', callback_data: 'no_action' });
        }

        inlineKeyboard.push(navigationRow);

        if (selectedDay) {
            const selectedDate = new Date(currentYear, currentMonth, selectedDay);
            const formattedDate = `${selectedDate.getFullYear()}-${(selectedDate.getMonth() + 1).toString().padStart(2, '0')}-${selectedDate.getDate().toString().padStart(2, '0')}`;
            inlineKeyboard.push([
                {
                    text: `–°–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ ${selectedDay} ${selectedDate.toLocaleString('ru-RU', { month: 'long' })}`,
                    callback_data: `start_record_${formattedDate}`
                }
            ]);
        }

        inlineKeyboard.push([{ text: '–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'back_to_profile' }]);

        await bot.editMessageText(
            `–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏—Å—Ç—É–ø–æ–≤\n\n–ï—Å–ª–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å, —Ç–æ –∑–Ω–∞—á–æ–∫ –ø–æ–∫–∞–∂–µ—Ç, –±—ã–ª –ª–∏ —É –≤–∞—Å –ø—Ä–∏—Å—Ç—É–ø:\nüî∏ ‚Äî –ü—Ä–∏—Å—Ç—É–ø –±–µ–∑ –ø—Ä–∏–µ–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤\nüî∫ ‚Äî –ü—Ä–∏—Å—Ç—É–ø —Å –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: { inline_keyboard: inlineKeyboard }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –¥–µ–Ω—å (—Ä—É—Å—Å–∫–∏–π)
async function handleDayPressRussian(bot, chatId, day, monthOffset) {
    const messageId = bot.userMessageIds[chatId]; // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π message_id
    await seizureCalendarRussian(bot, chatId, messageId, parseInt(monthOffset), parseInt(day));
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—è—Ü–∞ (—Ä—É—Å—Å–∫–∏–π)
async function handleChangeMonthRussian(bot, chatId, monthOffset, messageId) {
    await seizureCalendarRussian(bot, chatId, messageId, parseInt(monthOffset));
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É (—Ä—É—Å—Å–∫–∏–π)
async function startRecordingRussian(bot, chatId, date, messageId) {
    const dateObject = new Date(date);
    const formattedDate = dateObject.toISOString().split('T')[0];

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    if (bot.listeners('callback_query').length > 0) {
        bot.removeAllListeners('callback_query');
    }

    await db.query(
        `INSERT INTO calendar (user_id, date, created_at) VALUES ($1, $2, $3) ON CONFLICT (user_id, date) DO NOTHING`,
        [chatId, formattedDate, new Date()]
    );

    await bot.sendMessage(chatId, `–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ ${dateObject.toLocaleString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })}\n\n–£ –≤–∞—Å –±—ã–ª –ø—Ä–∏—Å—Ç—É–ø —ç–ø–∏–ª–µ–ø—Å–∏–∏?`, {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–î–∞', callback_data: `record_seizure_${date}` },
                    { text: '–ù–µ—Ç', callback_data: `record_no_seizure_${date}` }
                ]
            ]
        }
    });

    const callbackHandler = async (callbackQuery) => {
        const data = callbackQuery.data;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ö–∞–ª–µ–Ω–¥–∞—Ä—å" –∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å"
        if (data === 'seizure_calendar') {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            const message = await bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');
            bot.userMessageIds[chatId] = message.message_id;
            await seizureCalendarRussian(bot, chatId, message.message_id);
            return;
        }

        else if (data === 'back_to_profile') {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            bot.emit('back_to_profile', chatId);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ "–ù–µ—Ç –ø—Ä–∏—Å—Ç—É–ø–∞"
        else if (data.startsWith('record_no_seizure_')) {
            const dateString = data.split('record_no_seizure_')[1];
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            if (!Date.parse(dateString)) {
                console.error('Invalid date format:', dateString);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                return;
            }

            await bot.editMessageText(
                `–ó–∞–ø–∏—Å—å –Ω–∞ ${dateObject.toLocaleString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })}\n\n–í–æ–ø—Ä–æ—Å: –£ –≤–∞—Å –±—ã–ª –ø—Ä–∏—Å—Ç—É–ø —ç–ø–∏–ª–µ–ø—Å–∏–∏?\n–û—Ç–≤–µ—Ç: –ù–µ—Ç`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );

            try {
                await db.query(
                    `UPDATE calendar SET had_seizure = $1 WHERE user_id = $2 AND date = $3`,
                    [false, chatId, dateString]
                );

                await bot.sendMessage(chatId, `–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ –∑–∞–ø–∏—Å–∏?`, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '–î–∞', callback_data: `add_note_no_seizure_${dateString}` },
                                { text: '–ù–µ—Ç', callback_data: `no_note_no_seizure_${dateString}` }
                            ]
                        ]
                    }
                });
            } catch (error) {
                console.error('Error updating calendar:', error);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–∏—Å—Ç—É–ø–∞
        else if (data.startsWith('no_note_no_seizure_')) {
            const dateString = data.split('record_no_seizure_')[1];
            await bot.editMessageText(
                `–í–æ–ø—Ä–æ—Å: –ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ –∑–∞–ø–∏—Å–∏?\n–û—Ç–≤–µ—Ç: –ù–µ—Ç`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );

            await bot.sendMessage(chatId, `–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–î–∞—Ç–∞: ${dateObject.toLocaleString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })}`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'seizure_calendar' },
                            { text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'back_to_profile' }
                        ]
                    ]
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            //addFinalButtonsHandler();
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–∏—Å—Ç—É–ø–∞
        else if (data.startsWith('add_note_no_seizure_')) {
            const dateString = data.split('_')[3];

            await bot.editMessageText(
                `–í–æ–ø—Ä–æ—Å: –ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ –∑–∞–ø–∏—Å–∏?\n–û—Ç–≤–µ—Ç: –î–∞\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∑–∞–º–µ—Ç–∫—É:`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );

            const messageHandler = async (msg) => {
                if (msg.chat.id === chatId) {
                    const noteText = msg.text;

                    await bot.sendMessage(
                        chatId,
                        `–ó–∞–º–µ—Ç–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞:\n${noteText}`
                    );

                    await bot.sendMessage(chatId, `–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–î–∞—Ç–∞: ${dateObject.toLocaleString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })}`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'seizure_calendar' },
                                    { text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'back_to_profile' }
                                ]
                            ]
                        }
                    });

                    await db.query(
                        `UPDATE calendar SET note = $1, note_text = $2 WHERE user_id = $3 AND date = $4`,
                        [true, noteText, chatId, formattedDate]
                    );

                    bot.removeListener('message', messageHandler);

                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
                    //addFinalButtonsHandler();
                }
            };

            bot.once('message', messageHandler);
        }

        // –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è —Å –ø—Ä–∏—Å—Ç—É–ø–æ–º
        else if (data.startsWith('record_seizure_')) {
            const dateString = data.split('_')[2];

            await bot.editMessageText(
                `–ó–∞–ø–∏—Å—å –Ω–∞ ${dateObject.toLocaleString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })}\n\n–í–æ–ø—Ä–æ—Å: –£ –≤–∞—Å –±—ã–ª –ø—Ä–∏—Å—Ç—É–ø —ç–ø–∏–ª–µ–ø—Å–∏–∏?\n–û—Ç–≤–µ—Ç: –î–∞`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );

            await bot.sendMessage(chatId, `–í—ã –ø—Ä–∏–Ω–∏–º–∞–ª–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã?`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–î–∞', callback_data: `medications_yes_${dateString}` },
                            { text: '–ù–µ—Ç', callback_data: `medications_no_${dateString}` }
                        ]
                    ]
                }
            });

            await db.query(
                `UPDATE calendar SET had_seizure = $1 WHERE user_id = $2 AND date = $3`,
                [true, chatId, dateString]
            );
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞—Ö
        else if (data.startsWith('medications_yes_')) {
            const dateString = data.split('_')[2];

            await bot.editMessageText(
                `–í–æ–ø—Ä–æ—Å: –í—ã –ø—Ä–∏–Ω–∏–º–∞–ª–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã?\n–û—Ç–≤–µ—Ç: –î–∞`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );

            await bot.sendMessage(chatId, `–ö–∞–∫–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –≤—ã –ø—Ä–∏–Ω–∏–º–∞–ª–∏? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è:`);

            const messageHandler = async (msg) => {
                if (msg.chat.id === chatId) {
                    const medications = msg.text;

                    await bot.sendMessage(
                        chatId,
                        `–í–æ–ø—Ä–æ—Å: –ö–∞–∫–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –≤—ã –ø—Ä–∏–Ω–∏–º–∞–ª–∏?\n–û—Ç–≤–µ—Ç: ${medications}`
                    );

                    await bot.sendMessage(chatId, `–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏–ª—Å—è –ø—Ä–∏—Å—Ç—É–ø?`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '1', callback_data: `duration_1_${dateString}` },
                                    { text: '2', callback_data: `duration_2_${dateString}` },
                                    { text: '3', callback_data: `duration_3_${dateString}` },
                                    { text: '4', callback_data: `duration_4_${dateString}` },
                                    { text: '5', callback_data: `duration_5_${dateString}` },
                                    { text: '–ë–æ–ª—å—à–µ 5', callback_data: `duration_more_${dateString}` }
                                ]
                            ]
                        }
                    });

                    await db.query(
                        `UPDATE calendar SET medications = $1 WHERE user_id = $2 AND date = $3`,
                        [medications, chatId, dateString]
                    );

                    bot.removeListener('message', messageHandler);
                }
            };

            bot.once('message', messageHandler);
        }

        else if (data.startsWith('medications_no_')) {
            const dateString = data.split('_')[2];

            await bot.editMessageText(
                `–í–æ–ø—Ä–æ—Å: –í—ã –ø—Ä–∏–Ω–∏–º–∞–ª–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã?\n–û—Ç–≤–µ—Ç: –ù–µ—Ç`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );

            await bot.sendMessage(chatId, `–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏–ª—Å—è –ø—Ä–∏—Å—Ç—É–ø?`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '1', callback_data: `duration_1_${dateString}` },
                            { text: '2', callback_data: `duration_2_${dateString}` },
                            { text: '3', callback_data: `duration_3_${dateString}` },
                            { text: '4', callback_data: `duration_4_${dateString}` },
                            { text: '5', callback_data: `duration_5_${dateString}` },
                            { text: '–ë–æ–ª—å—à–µ 5', callback_data: `duration_more_${dateString}` }
                        ]
                    ]
                }
            });
        }

        else if (data.startsWith('duration_')) {
            const [_, minutes, dateString] = data.split('_');
            const duration = minutes === 'more' ? '–ë–æ–ª—å—à–µ 5' : minutes;

            await bot.editMessageText(
                `–í–æ–ø—Ä–æ—Å: –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏–ª—Å—è –ø—Ä–∏—Å—Ç—É–ø?\n–û—Ç–≤–µ—Ç: ${duration} –º–∏–Ω—É—Ç`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );

            await bot.sendMessage(chatId, `–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –ø—Ä–æ –ø—Ä–∏—Å—Ç—É–ø?`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–î–∞', callback_data: `add_note_${dateString}` },
                            { text: '–ù–µ—Ç', callback_data: `no_note_${dateString}` }
                        ]
                    ]
                }
            });

            await db.query(
                `UPDATE calendar SET seizure_duration = $1 WHERE user_id = $2 AND date = $3`,
                [minutes === 'more' ? '>5' : minutes, chatId, dateString]
            );
        }

        else if (data.startsWith('no_note_')) {
            const dateString = data.split('_')[2];

            await bot.editMessageText(
                `–í–æ–ø—Ä–æ—Å: –ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –ø—Ä–æ –ø—Ä–∏—Å—Ç—É–ø?\n–û—Ç–≤–µ—Ç: –ù–µ—Ç`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );

            await bot.sendMessage(chatId, `–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–î–∞—Ç–∞: ${dateObject.toLocaleString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })}`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'seizure_calendar' },
                            { text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'back_to_profile' }
                        ]
                    ]
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            //addFinalButtonsHandler();
        }

        else if (data.startsWith('add_note_')) {
            const dateString = data.split('_')[2];

            await bot.editMessageText(
                `–í–æ–ø—Ä–æ—Å: –ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –ø—Ä–æ –ø—Ä–∏—Å—Ç—É–ø?\n–û—Ç–≤–µ—Ç: –î–∞\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∑–∞–º–µ—Ç–∫—É:`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );

            const messageHandler = async (msg) => {
                if (msg.chat.id === chatId) {
                    const noteText = msg.text;

                    await bot.sendMessage(
                        chatId,
                        `–ó–∞–º–µ—Ç–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞:\n${noteText}`
                    );
                    await bot.sendMessage(chatId, `–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–î–∞—Ç–∞: ${dateObject.toLocaleString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })}`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å', callback_data: 'seizure_calendar' },
                                    { text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'back_to_profile' }
                                ]
                            ]
                        }
                    });

                    await db.query(
                        `UPDATE calendar SET note = $1, note_text = $2 WHERE user_id = $3 AND date = $4`,
                        [true, noteText, chatId, dateString]
                    );

                    bot.removeListener('message', messageHandler);

                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
                    //addFinalButtonsHandler();
                }
            };

            bot.once('message', messageHandler);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    // const addFinalButtonsHandler = () => {
    //     const finalButtonsHandler = async (finalQuery) => {
    //         if (finalQuery.data === 'seizure_calendar') {
    //             await bot.deleteMessage(chatId, finalQuery.message.message_id);
    //             const message = await bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');
    //             bot.userMessageIds[chatId] = message.message_id;
    //             await seizureCalendarRussian(bot, chatId, message.message_id);
    //         } else if (finalQuery.data === 'back_to_profile') {
    //             await bot.deleteMessage(chatId, finalQuery.message.message_id);
    //             bot.emit('return_to_profile', chatId);
    //         }
    //     };
    //     bot.once('callback_query', finalButtonsHandler);
    // };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    bot.on('callback_query', callbackHandler);
}

module.exports = {
    seizureCalendarRussian,
    handleChangeMonthRussian,
    handleDayPressRussian,
    startRecordingRussian
};