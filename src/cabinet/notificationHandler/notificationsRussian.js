const db = require('../../config/db');

class NotificationsRussian {
    constructor(bot) {
        this.bot = bot;
        this.timeRanges = {
            morning: Array.from({length: 6}, (_, i) => i + 6), // 6-11
            day: Array.from({length: 6}, (_, i) => i + 12),    // 12-17
            evening: Array.from({length: 6}, (_, i) => i + 18)  // 18-23
        };
        // Add state management for user inputs
        this.pendingNotifications = new Map();
    }

    setupHandlers() {
        this.setupCallbackHandlers(this.bot);
        this.setupMessageHandlers(this.bot);
    }

    async handleNotifications(bot, chatId, messageId) {
        try {
            const notifications = await this.getUserNotifications(chatId);

            // Check number of notifications and create appropriate keyboard
            const keyboard = notifications.length === 0
                ? [
                    [{ text: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ', callback_data: 'add_notification' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'back_to_profile' }]
                ]
                : notifications.length < 9
                    ? [
                        [
                            { text: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ', callback_data: 'add_notification' },
                            { text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'view_notifications' }
                        ],
                        [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data: 'edit_notifications_select' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'back_to_profile' }]
                    ]
                    : [
                        [{ text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'view_notifications' }],
                        [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data: 'edit_notifications_select' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'back_to_profile' }]
                    ];

            const options = {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: { inline_keyboard: keyboard }
            };

            const messageText = notifications.length === 0
                ? '–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å: 0 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.'
                : `–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: ${notifications.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ(–π)`;

            await bot.editMessageText(messageText, options);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        }
    }

    async handleViewNotifications(bot, chatId, messageId) {
        try {
            const notifications = await this.getUserNotifications(chatId);

            const notificationsList = notifications.map((notification, index) =>
                `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${index + 1}: ${notification.medication}, ${notification.dose} –≤ ${notification.notification_time}`
            ).join('\n');

            const options = {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'notifications' }]
                    ]
                }
            };

            await bot.editMessageText(notificationsList || '–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', options);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        }
    }

    async handleEditNotificationsSelect(bot, chatId, messageId) {
        try {
            const notifications = await this.getUserNotifications(chatId);

            const notificationsKeyboard = notifications.map((notification, index) => [{
                text: `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${index + 1}: ${notification.medication}, ${notification.dose} –≤ ${notification.notification_time}`,
                callback_data: `select_notification_${notification.id}`
            }]);

            notificationsKeyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'notifications' }]);

            const options = {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: { inline_keyboard: notificationsKeyboard }
            };

            await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', options);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        }
    }

    async handleNotificationOptions(bot, chatId, messageId, notificationId) {
        const options = {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–ò–∑–º–µ–Ω–∏—Ç—å', callback_data: `edit_notification_${notificationId}` },
                        { text: '–£–¥–∞–ª–∏—Ç—å', callback_data: `delete_notification_${notificationId}` }
                    ],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'edit_notifications_select' }]
                ]
            }
        };

        await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', options);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        bot.on('callback_query', async (callbackQuery) => {
            const data = callbackQuery.data;

            if (data === `edit_notification_${notificationId}`) {
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                const deleted = await this.deleteNotification(notificationId);

                if (deleted) {
                    // –ù–∞—á–∏–Ω–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    await bot.editMessageText('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ!', {
                        chat_id: chatId,
                        message_id: messageId,
                    });

                    await this.handleAddNotification(bot, chatId, messageId, 'time');
                } else {
                    await bot.editMessageText('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', callback_data: 'notifications' }]
                            ]
                        }
                    });
                }
            }
        });
    }


    async deleteNotification(notificationId) {
        try {
            const query = 'DELETE FROM notifications WHERE id = $1';
            await db.query(query, [notificationId]);
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
            return false;
        }
    }

    async handleAddNotification(bot, chatId, messageId, step = 'time', dayPeriod = null) {
        let options = {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: [] }
        };

        let messageText = '';

        switch(step) {
            case 'time':
                options.reply_markup.inline_keyboard = [
                    [
                        { text: '–£—Ç—Ä–æ', callback_data: 'notification_time_morning' },
                        { text: '–î–µ–Ω—å', callback_data: 'notification_time_day' },
                        { text: '–í–µ—á–µ—Ä', callback_data: 'notification_time_evening' }
                    ],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'notifications' }]
                ];
                messageText = '–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?';
                break;

            case 'exact_time':
                const timeButtons = this.generateTimeButtons(dayPeriod);
                options.reply_markup.inline_keyboard = [
                    ...timeButtons,
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'add_notification' }]
                ];
                messageText = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è:';
                break;

            case 'medication':
                options.reply_markup.inline_keyboard = this.generateMedicationKeyboard();
                messageText = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞';
                break;

            case 'dose':
                // –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    { chat_id: chatId, message_id: messageId }
                );

                // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–≤–æ–¥–µ –¥–æ–∑—ã
                messageText = '–í–≤–µ–¥–∏—Ç–µ –¥–æ–∑—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:';
                options.reply_markup.inline_keyboard = [
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º', callback_data: 'add_notification_medication' }]
                ];
                break;

        }

        await bot.editMessageText(messageText, options);
    }

    generateTimeButtons(dayPeriod) {
        const times = this.timeRanges[dayPeriod];
        const buttons = [];
        let row = [];

        times.forEach(hour => {
            row.push({
                text: `${hour}:00`,
                callback_data: `exact_time_${hour}:00`
            });

            if (row.length === 3) {
                buttons.push([...row]);
                row = [];
            }
        });

        if (row.length > 0) {
            buttons.push(row);
        }

        return buttons;
    }

    generateMedicationKeyboard() {
        const medications = [
            '–í–∞–ª—å–ø—Ä–æ–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞', '–õ–µ–≤–µ—Ç–∏—Ä–∞—Ü–µ—Ç–∞–º', '–ö–∞—Ä–±–∞–º–∞–∑–µ–ø–∏–Ω',
            '–õ–∞–º–æ—Ç—Ä–∏–¥–∂–∏–Ω', '–¢–æ–ø–∏—Ä–∞–º–∞—Ç', '–û–∫—Å–∫–∞—Ä–±–∞–∑–µ–ø–∏–Ω', '–ó–æ–Ω–∏—Å–∞–º–∏–¥',
            '–≠—Ç–æ—Å—É–∫—Å–∏–º–∏–¥', '–§–µ–Ω–æ–±–∞—Ä–±–∏—Ç–∞–ª', '–ü–µ—Ä–∞–º–ø–∞–Ω–µ–ª', '–õ–∞–∫–æ—Å–∞–º–∏–¥',
            '–ì–∞–±–∞–ø–µ–Ω—Ç–∏–Ω', '–ü—Ä–µ–≥–∞–±–∞–ª–∏–Ω', '–í–∏–≥–∞–±–∞—Ç—Ä–∏–Ω', '–°—É–ª—å—Ç–∏–∞–º',
            '–†—É—Ñ–∏–Ω–∞–º–∏–¥', '–§–ª–µ–±–∞–º–∞—Ç', '–§–µ–Ω–∏—Ç–æ–∏–Ω', '–ö–ª–æ–Ω–∞–∑–µ–ø–∞–º', '–ë–µ–Ω–∑–æ–Ω–∞–ª'
        ];

        const keyboard = medications.reduce((result, med, index) => {
            const rowIndex = Math.floor(index / 2);
            if (!result[rowIndex]) result[rowIndex] = [];
            result[rowIndex].push({ text: med, callback_data: `medication_${med}` });
            return result;
        }, []);

        keyboard.push([
            { text: '–í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç', callback_data: 'medication_custom' },
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'notifications' }
        ]);

        return keyboard;
    }

    async handleMedicationSelection(bot, chatId, messageId, medication) {
        // Store the medication in pending notifications
        this.pendingNotifications.set(chatId, {
            ...this.pendingNotifications.get(chatId),
            medication: medication === 'custom' ? null : medication
        });

        if (medication === 'custom') {
            // Ask user to input custom medication name
            const options = {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤', callback_data: 'add_notification_medication' }]
                    ]
                }
            };
            await bot.editMessageText('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:', options);
        } else {
            // Ask for dose
            await this.handleAddNotification(bot, chatId, messageId, 'dose');
        }
    }

    async saveNotification(chatId, time, medication, dose) {
        try {
            // Check if user already has 9 notifications
            const existingNotifications = await this.getUserNotifications(chatId);
            if (existingNotifications.length >= 9) {
                return false; // Prevent adding more than 9 notifications
            }

            const query = `
                INSERT INTO notifications (user_id, notification_time, medication, dose) 
                VALUES ($1, $2, $3, $4)
            `;
            await db.query(query, [chatId, time, medication, dose]);

            // Clear pending notification after saving
            this.pendingNotifications.delete(chatId);

            return true;
        } catch (error) {
            console.error('Error saving notification:', error);
            return false;
        }
    }

    async getUserNotifications(chatId) {
        const query = 'SELECT * FROM notifications WHERE user_id = $1';
        const result = await db.query(query, [chatId]);
        return result.rows;
    }

    async completeNotificationSetup(bot, chatId, messageId) {
        const options = {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', callback_data: 'notifications' }]
                ]
            }
        };

        await bot.editMessageText('–í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', options);
    }

    setupCallbackHandlers(bot) {
        //bot.removeAllListeners('callback_query');
        bot.on('callback_query', async (callbackQuery) => {
            const chatId = callbackQuery.message.chat.id;
            const messageId = callbackQuery.message.message_id;
            const data = callbackQuery.data;

            if (data.startsWith('notification_time_')) {
                const period = data.replace('notification_time_', '');
                await this.handleAddNotification(bot, chatId, messageId, 'exact_time', period);
            } else if (data.startsWith('exact_time_')) {
                const selectedTime = data.replace('exact_time_', '');
                this.pendingNotifications.set(chatId, {
                    time: selectedTime
                });
                await this.handleAddNotification(bot, chatId, messageId, 'medication');
            } else if (data.startsWith('medication_')) {
                const medication = data.replace('medication_', '');
                await this.handleMedicationSelection(bot, chatId, messageId, medication);
            } else if (data.startsWith('select_notification_')) {
                const notificationId = data.replace('select_notification_', '');
                await this.handleNotificationOptions(bot, chatId, messageId, notificationId);
            } else if (data.startsWith('delete_notification_')) {
                const notificationId = data.replace('delete_notification_', '');
                const deleted = await this.deleteNotification(notificationId);

                if (deleted) {
                    await bot.editMessageText('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!', {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', callback_data: 'notifications' }]
                            ]
                        }
                    });
                } else {
                    await bot.editMessageText('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', callback_data: 'notifications' }]
                            ]
                        }
                    });
                }
            } else {
                switch(data) {
                    case 'notifications':
                        await this.handleNotifications(bot, chatId, messageId);
                        break;
                    case 'add_notification':
                        await this.handleAddNotification(bot, chatId, messageId, 'time');
                        break;
                    case 'add_notification_medication':
                        await this.handleAddNotification(bot, chatId, messageId, 'medication');
                        break;
                    case 'view_notifications':
                        await this.handleViewNotifications(bot, chatId, messageId);
                        break;
                    case 'edit_notifications_select':
                        await this.handleEditNotificationsSelect(bot, chatId, messageId);
                        break;
                }
            }

            await bot.answerCallbackQuery(callbackQuery.id);
        });
    }

    setupMessageHandlers(bot) {

        bot.on('message', async (msg) => {
            const chatId = msg.chat.id;
            const messageId = msg.message_id;
            const text = msg.text;

            const pendingNotification = this.pendingNotifications.get(chatId);

            if (!pendingNotification) return; // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
            if (pendingNotification.time && !pendingNotification.medication) {
                this.pendingNotifications.set(chatId, {
                    ...pendingNotification,
                    medication: text
                });

                // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    { chat_id: chatId, message_id: messageId - 1 }
                );

                // –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–æ–∑—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–æ–∑—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:');
            }
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–æ–∑—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
            else if (pendingNotification.time && pendingNotification.medication) {
                // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                const saved = await this.saveNotification(
                    chatId,
                    pendingNotification.time,
                    pendingNotification.medication,
                    text
                );

                // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
                this.pendingNotifications.delete(chatId);

                if (saved) {
                    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                    await bot.sendMessage(chatId, '–í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', callback_data: 'notifications' }]
                            ]
                        }
                    });
                } else {
                    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', callback_data: 'notifications' }]
                            ]
                        }
                    });
                }
            }
        });
    }



}

module.exports = NotificationsRussian;